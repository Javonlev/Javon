import uuid
from datetime import datetime

class Person:
    def __init__(self, name, age, gender):
        self.name = name
        try:
            if age <= 0:
                raise ValueError("Age must be positive.")
            self.age = age
        except ValueError as e:
            print(f"Error: {e}")
            self.age = 0
        self.gender = gender

    def display(self):
        print(f"Name: {self.name}, Age: {self.age}, Gender: {self.gender}")

class Patient(Person):
    patient_counter = 1
    
    def __init__(self, name, age, gender, dob):
        super().__init__(name, age, gender)
        self.dob = dob
        self.patient_id = f"P{Patient.patient_counter}"
        Patient.patient_counter += 1
        self.appointment_list = []

    def book_appointment(self, appointment): 
        self.appointment_list.append(appointment)

    def view_profile(self):
        print(f"\n--- Patient Profile ---")
        print(f"Patient ID:  {self.patient_id}")
        self.display()
        print(f"Date of Birth: {self.dob}")
        if self.appointment_list:
            print("Appointments:")
            for appt in self.appointment_list:
                print(f"- {appt.appointment_id} with Dr.{appt.doctor.name} on {appt.date} at {appt.time}  (status: {appt.status})")
        else:
            print("No appointments booked.")

class Doctor(Person):
    doctor_counter = 1
    
    def __init__(self, name, age, gender, specialty, schedule):
        super().__init__(name, age, gender)
        self.specialty = specialty
        self.schedule = schedule
        self.doctor_id = f"D{Doctor.doctor_counter}"
        Doctor.doctor_counter +=1

    def is_available(self, weekday, time_str):
        try:
            weekday = weekday.capitalize() 
            if weekday not in self.schedule["weekdays"]:
                return False
            start = datetime.strptime(self.schedule["start_time"], "%H:%M").time()
            end = datetime.strptime(self.schedule["end_time"], "%H:%M").time()
            check_time = datetime.strptime(time_str, "%H:%M").time()
            return start <= check_time <= end
        except Exception as e:
            print(f"Error checking availability:  {e}")
            return False
    
    def view_schedule(self):
        print(f"\n--- Doctor Profile ---")
        print(f"Doctor ID: {self.doctor_id}, Name: {self.name}, Specialty: {self.specialty}")
        print(f"Age: {self.age}, Gender: {self.gender}")
        print(f"Works on: {', '.join(self.schedule['weekdays'])} from {self.schedule['start_time']} to {self.schedule['end_time']}")

class Appointment:
    def __init__(self, patient, doctor, date, time):
        self.appointment_id = "A" + str(uuid.uuid4())[:6]
        self.patient = patient
        self.doctor = doctor
        self.date = date
        self.time = time
        self.status = "Confirmed"

    def cancel(self):
        self.status = "Cancelled"

class HospitalSystem:
    def __init__(self):
        self.patients = {}
        self.doctors = {}
        self.appointments = {}

    def add_patient(self, name, age, gender, dob):
        patient = Patient(name, age, gender, dob)
        self.patients[patient.patient_id] = patient
        print(f"\nPatient added successfully with ID: {patient.patient_id}")

    def add_doctor(self, name, age, gender, specialty, schedule):
        doctor = Doctor(name, age, gender, specialty, schedule)
        self.doctors[doctor.doctor_id] = doctor
        print(f"\nDoctor added successfully with ID: {doctor.doctor_id}")

    def book_appointment(self, patient_id, doctor_id, weekday, time):
        if patient_id not in self.patients:
            print("Invalid patient ID.")
            return
        if doctor_id not in self.doctors:
            print("Invalid doctor ID. Please enter a correct doctor ID.")
            return
        
        patient = self.patients[patient_id]
        doctor = self.doctors[doctor_id]
        
        if doctor.is_available(weekday, time):
            for appt in self.appointments.values():
                if appt.doctor.doctor_id == doctor_id and appt.date == weekday and appt.time == time and appt.status == "Confirmed":
                    print("Error: Doctor already has an appointment at this time.")
                    return
            appointment = Appointment(patient, doctor, weekday, time)
            patient.book_appointment(appointment)
            self.appointments[appointment.appointment_id] = appointment
            print(f'\nAppointment booked successfully with ID: {appointment.appointment_id}')
        else:
            print("Doctor is not available at the selected weekday and time. ")
    
    def cancel_appointment(self, appointment_id):
        if appointment_id in self.appointments:
            self.appointments[appointment_id].cancel()
            print("Appointment cancelled successfully.")
        else:
            print("Invalid appointment ID.")
            
    def reschedule_appointment(self, appointment_id, new_weekday, new_time):
        if appointment_id in self.appointments:
            appointment = self.appointments[appointment_id]
            doctor = appointment.doctor
            if doctor.is_available(new_weekday, new_time):
                for appt in self.appointments.values():
                    if (appt.doctor.doctor_id == doctor.doctor_id and appt.date == new_weekday and appt.time == new_time and appt.status == "Confirmed" and appt.appointment_id != appointment_id):
                        print("Error: Doctor already has an appointment at this time.")
                        return
                appointment.date = new_weekday
                appointment.time = new_time
                print("Appointment rescheduled successfully.")
            else:
                print("Doctor is not available at the new weekday and time.")
        else:
            print("Invalid appointment ID.")

    def generate_bill(self, patient_id):
        if patient_id in self.patients:
            patient = self.patients[patient_id]
            consultation_fee = 3000
            try:
                additional_fee = float(input("Enter additional service fees: "))
                if additional_fee < 0:
                    raise ValueError("Fee cannot be negative.")
            except ValueError as e:
                print(f"Error: {e}")
                additional_fee = 0
               
            total = consultation_fee + additional_fee
            
            print("\n===== Siempre Ayudando Mano Hospital =====")
            print(f"Patient Name: {patient.name}")
            print(f"Consultation Fee: JMD${consultation_fee}")
            print(f"Additional Fees: JMD${additional_fee}")
            print(f"Total Bill: JMD${total}")
            print("========================")

            while True:
                payment_method = input("Enter payment method )Cash/Card): ").strip().lower()
                
                if payment_method == "cash":
                    print("\nPayment received in cash.")
                    print("Transaction complete.")
                    break
                
                elif payment_method == "card":
                    while True:
                        method = input("Please swipe or tap your card (type 'swipe' or 'tap'): ").strip().lower()
                        if method in ["swipe", "tap"]:
                            print("Transaction complete via card")
                            break
                        else:
                            print("Invalid input. Please type 'swipe' or 'tap'.")
                    break
                else:
                    print("Invalid input, Please enter 'Cash' or 'Card'.")
                    
            
            print("\n========== PAYMENT RECEIPT ==========")
            print(f"Receipt ID: R{str(uuid.uuid4())[:6].upper()}")
            print(f"Patient: {patient.name}")
            print(f"Date: {datetime.now().strftime('%Y-%m-%d %h:%M:%S')}")
            print(f"Payment Method:  {payment_method}")
            print(f"Total Paid: JMD${total}")
            print("Thank you for choosing Siempre Ayudando Mano Hospital!")
            print("=====================================")
        else:
            print("Invalid patient ID.")
        
    def view_patients(self):
        if self.patients:
            for patient in self.patients.values():
                patient.view_profile()
        else:
            print("No patients registered.")

    def view_doctors(self):
        if self.doctors:
            for doctor in self.doctors.values():
                doctor.view_schedule()
        else:
            print("No doctors registered.")

    def view_appointments(self):
        if self.appointments:
            for appt in self.appointments.values():
                print(f"ID: {appt.appointment_id}, Patient: {appt.patient.name}, Doctor: {appt.doctor.name}, date: {appt.date}, Time: {appt.time}, Status: {appt.status}")
        else:
            print("No appointments scheduled.")

def main_menu():
    hs = HospitalSystem()
    while True:
        print("\n===== Hospital Management System =====")
        print("1. Add Patient")
        print("2. Add Doctor")
        print("3. Book Appointment")
        print("4. Cancel Appointment")
        print("5. Reschedule Appointment")
        print("6. View Patients Information")
        print("7. View Doctor Information")
        print("8. View Appointments")
        print("9. Generate Bill")
        print("10. Exit")
        choice = input("Enter choice: ")
        
        if choice == '1':
            name = input("Enter name: ")
            while True:
                age_input = input("Enter age: ")
                if age_input.isdigit() and int(age_input) > 0:
                    age = int(age_input)
                break
            else:
                print("Invalid age. Please enter a valid positive number.")
            gender = input("Enter gender (Male/Female): ").capitalize()
            dob = input("Enter date of birth (YYYY-MM-DD): ")
            hs.add_patient(name, age, gender, dob)
            
        elif choice == '2':
            name = input("Enter name: ")
            while True:
                age_input = input("Enter age: ")
                if age_input.isdigit() and int(age_input) > 0:
                    age = int(age_input)
                    break
                else:
                    print("Invalid age. Please enter a valid positive number.")
            gender = input("Enter gender (Male/Female): ").capitalize()
            specialty = input("Enter specialty: ")
            all_weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]
            chosen_days_input = input("Enter the weekdays separated by commas: ")
            chosen_days = [day.strip().capitalize() for day in chosen_days_input.split(",") if day.strip().capitalize() in all_weekdays]
            start_time_input = input("Enter start time (e.g., 10:00AM): ")
            start_time = datetime.strptime(start_time_input.strip(), "%I:%M%p").strftime("%H:%M")
            end_time_input = input("Enter end time (e.g., 5:00PM:")
            end_time = datetime.strptime(end_time_input.strip(), "%I:%M%p").strftime("%H:%M")
            schedule = {
                "weekdays": chosen_days,
                "start_time": start_time,
                "end_time": end_time,
                "slot_duration": 30
            }
            hs.add_doctor(name, age, gender, specialty, schedule)
            
        elif choice == '3':
            patient_id = input("Enter patient ID: ")
            doctor_id = input("Enter doctor ID: ")
            if doctor_id in hs.doctors:
               doctor = hs.doctors[doctor_id]
               print(f"Doctor is available on: {', '.join(doctor.schedule['weekdays'])} from {doctor.schedule['start_time']} to {doctor.schedule['end_time']}")
               weekday = input("Enter weekday to book: ").capitalize()
               time_input = input("Enter time (e.g., 2:00PM): ")
               try:
                   time_24 = datetime.strptime(time_input.strip(), "%I:%M%p").strftime("%H:%M")
                   hs.book_appointment(patient_id, doctor_id, weekday, time_24)
               except ValueError:
                    print("Invalid time format.")
            else:
                print("Doctor not found.")
               
        elif choice == '4':
            appointment_id = input("Enter appointment ID to cancel: ")
            hs.cancel_appointment(appointment_id)
                
        elif choice == '5':
            appointment_id = input("Enter appointment ID to reschedule: ")
            new_weekday = input("Enter new weekday: ").capitalize()
            
            if appointment_id in hs.appointments:
                appointment = hs.appointments[appointment_id]
                doctor = appointment.doctor
                
                while True:
                    new_time_input = input("Enter new time (e.g., 10:00AM ): ")
                    try:
                         new_time = datetime.strptime(new_time_input.strip(),  "%I:%M%p").strftime("%H:%M")
                    except ValueError:
                        print("Invalid time format. Please enter again (e.g., 3:00PM).")
                        continue
                    
                    if not doctor.is_available(new_weekday, new_time):
                        print(f"Doctor is not available on {new_weekday}   at {new_time_input}. Please enter another time .")
                        continue
                    
                    conflict = False
                    for appt in hs.appointments.values():
                        if (appt.doctor.doctor_id == doctor.doctor_id and
                            appt.date == new_weekday and
                            appt.time == new_time and
                            appt.status == "Confirmed" and
                            appt.appointment_id != appointment_id):
                            conflict = True
                            break
                    if conflict:
                        print("Doctor already has another appointment at this time. Please enter another time.")
                        continue
                        
                    appointment.date = new_weekday
                    appointment.time = new_time
                    print("Appointment reschedules successfully.")
                    break
            else:
                print("Invalid appointment ID.")
                
        elif choice == '6':
            hs.view_patients()
        elif choice == '7':
            hs.view_doctors()
        elif choice =='8':
            hs.view_appointments()
        elif choice == '9':
            patient_id = input("ENTER PATIENT ID: ")
            hs.generate_bill(patient_id)
        elif choice == '10':
            print("Exiting system. Goodbye!")
            break
        else:
            print("Invalid choice.")

if __name__ == "__main__":
    main_menu()